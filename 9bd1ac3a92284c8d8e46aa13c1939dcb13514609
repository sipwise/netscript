{
  "comments": [
    {
      "key": {
        "uuid": "da01753e_2d3e11b9",
        "filename": "deployment.sh",
        "patchSetId": 1
      },
      "lineNbr": 1447,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2017-02-17T10:45:31Z",
      "side": 1,
      "message": "Hm, why the for loop?\n(We leak the $package variable here BTW now)",
      "revId": "9bd1ac3a92284c8d8e46aa13c1939dcb13514609",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_0df4edf0",
        "filename": "deployment.sh",
        "patchSetId": 1
      },
      "lineNbr": 1447,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2017-02-17T11:46:07Z",
      "side": 1,
      "message": "to do not have # shellcheck disable\u003dSC2010\notherwise list of packages cannot be quoted\n\nwhat means \"leak the $package variable\" here?\ndo you mean the last value will be inside variable when loop is over?",
      "parentUuid": "da01753e_2d3e11b9",
      "revId": "9bd1ac3a92284c8d8e46aa13c1939dcb13514609",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_6c765240",
        "filename": "deployment.sh",
        "patchSetId": 1
      },
      "lineNbr": 1447,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2017-02-21T13:08:50Z",
      "side": 1,
      "message": "Well, with this for loop we get a different runtime behavior though: one dpkg --purge ... call vs. multiple dpkg --purge runs.\n\nIf we want to avoid the quoting issue then let\u0027s go with an array approach, like:\n\nremoved_packages\u003d( $(chroot $TARGET ...) )\nif [ ${#removed_packages[@]} -ne 0 ]; then\n  chroot \"$TARGET\" dpkg --purge \"${removed_packages[@]}\"\n...\n\n\u003e what means \"leak the $package variable\" here?\n\u003e do you mean the last value will be inside variable\n\u003e when loop is over?\n\nThe $package variable is set outside the for loop:\n\n% cat foo \nunset foo ; for foo in 1 2 ; do echo \"foo inside \u003d $foo\" ; done ; echo \"foo outside \u003d $foo\"\n% bash ./foo\nfoo inside \u003d 1\nfoo inside \u003d 2\nfoo outside \u003d 2",
      "parentUuid": "da01753e_0df4edf0",
      "revId": "9bd1ac3a92284c8d8e46aa13c1939dcb13514609",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    }
  ]
}